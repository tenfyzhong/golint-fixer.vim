Given go (//Haha):
  package test
  
  //Haha
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  //Haha 
  type Haha struct {
  
  }

Given go (//  Haha     ):
  package test
  
  //  Haha     
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  //Haha 
  type Haha struct {
  
  }

Given go (//haha    ):
  package test
  
  //Haha
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  //Haha 
  type Haha struct {
  
  }

Given go (/*haha  ):
  package test
  
  /*haha  
  */
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  /*Haha 
  */
  type Haha struct {
  
  }

Given go (/*haha*/):
  package test
  
  /*haha*/
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  /*Haha */
  type Haha struct {
  
  }

Given go (/*haha xxx*/):
  package test
  
  /*haha xxx*/
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  /*Haha xxx*/
  type Haha struct {
  
  }

Given go (//haha    xxx):
  package test
  
  //haha    xxx
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  //Haha xxx
  type Haha struct {
  
  }

Given go (//xxx):
  package test
  
  //xxx
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  //Haha xxx
  type Haha struct {
  
  }

Given go (//):
  package test
  
  //
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  //Haha 
  type Haha struct {
  
  }

Given go (/*xxx):
  package test
  
  /*xxx
   */
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  /*Haha xxx
   */
  type Haha struct {
  
  }

Given go (/*xxx*/):
  package test
  
  /*xxx*/
  type Haha struct {
  
  }

Execute (fix):
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 1, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'comment on exported type Haha should be of the form "Haha ..." (with optional leading article)'}])
  3
  GoLintFix
  stopinsert

Expect go (after fix):
  package test
  
  /*Haha xxx*/
  type Haha struct {
  
  }

