Given go (blank import in one line):
  //Package test
  package test
  
  import _ "log"  

Execute (lint fix):
  call setqflist([{'lnum': 4, 'bufnr': 1, 'col': 8, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 'text': 'a blank import should be only in a main or test package, or have a comment justifying it'}])
  4
  GoLintFix
  stopinsert

Expect go (after fix):
  //Package test
  package test
  
  import _ "log" //

Given go (blank import more the one line):
  //Package test
  package test
  
  import (
      _ "log"  
  )

Execute (lint fix):
  call setqflist([{'lnum': 5, 'bufnr': 1, 'col': 8, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 'text': 'a blank import should be only in a main or test package, or have a comment justifying it'}])
  5
  GoLintFix
  stopinsert

Expect go (after fix):
  //Package test
  package test
  
  import (
      _ "log" //
  )

Given go (var()):
  package foo
  var (
  	Ha, Hb int
  )

Execute:
  call setqflist([{'lnum': 3, 'bufnr': 1, 'col': 2, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'exported var Hb should have its own declaration'}])
  3
  GoLintFix

Expect go:
  package foo
  var (
  	Hb int
  	Ha int
  )

Given go (  var Haa, Hbb):
  package foo
  	var Haa, Hbb int

Execute:
  call setqflist([{'lnum': 2, 'bufnr': 1, 'col': 6, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'exported var Hbb should have its own declaration'}])
  2
  GoLintFix

Expect go:
  package foo
  	var Hbb int
  	var Haa int

Given go (  var Ha1, Hb2 int = 1, 2):
  package foo
  	var Ha1, Hb2 int = 1, 2

Execute:
  call setqflist([{'lnum': 2, 'bufnr': 1, 'col': 6, 'valid': 1, 'vcol': 0, 
    \'nr': -1, 'type': 'W', 'pattern': '', 
    \'text': 'exported var Hb2 should have its own declaration'}])
  2
  GoLintFix

Expect go:
  package foo
  	var Hb2 int = 2
  	var Ha1 int = 1
